// Generated by uRequire v0.7.0-beta.14  template: 'combined'
// Combined template optimized with RequireJS/r.js v2.1.15 & almond v0.3.0.
(function (global, window){
  
var __isAMD = !!(typeof define === 'function' && define.amd),
    __isNode = (typeof exports === 'object'),
    __isWeb = !__isNode;


  var __nodeRequire = (__isNode ? require : function(dep){
        throw new Error("uRequire: combined template 'undefined', trying to load `node` dep `" + dep + "` in non-nodejs runtime (browser).")
      }),
      __throwMissing = function(dep, vars) {
        throw new Error("uRequire: combined template 'undefined', detected missing dependency `" + dep + "` - all it's known binding variables `" + vars + "` were undefined")
      },
      __throwExcluded = function(dep, descr) {
        throw new Error("uRequire: combined template 'undefined', trying to access unbound / excluded `" + descr + "` dependency `" + dep + "` on browser");
      };
var bundleFactory = function() {
/**
 * @license almond 0.3.0 Copyright (c) 2011-2014, The Dojo Foundation All Rights Reserved.
 * Available via the MIT or new BSD license.
 * see: http://github.com/jrburke/almond for details
 */
//Going sloppy to avoid 'use strict' string cost, but strict practices should
//be followed.
/*jslint sloppy: true */
/*global setTimeout: false */

var requirejs, require, define;
(function (undef) {
    var main, req, makeMap, handlers,
        defined = {},
        waiting = {},
        config = {},
        defining = {},
        hasOwn = Object.prototype.hasOwnProperty,
        aps = [].slice,
        jsSuffixRegExp = /\.js$/;

    function hasProp(obj, prop) {
        return hasOwn.call(obj, prop);
    }

    /**
     * Given a relative module name, like ./something, normalize it to
     * a real name that can be mapped to a path.
     * @param {String} name the relative name
     * @param {String} baseName a real name that the name arg is relative
     * to.
     * @returns {String} normalized name
     */
    function normalize(name, baseName) {
        var nameParts, nameSegment, mapValue, foundMap, lastIndex,
            foundI, foundStarMap, starI, i, j, part,
            baseParts = baseName && baseName.split("/"),
            map = config.map,
            starMap = (map && map['*']) || {};

        //Adjust any relative paths.
        if (name && name.charAt(0) === ".") {
            //If have a base name, try to normalize against it,
            //otherwise, assume it is a top-level require that will
            //be relative to baseUrl in the end.
            if (baseName) {
                //Convert baseName to array, and lop off the last part,
                //so that . matches that "directory" and not name of the baseName's
                //module. For instance, baseName of "one/two/three", maps to
                //"one/two/three.js", but we want the directory, "one/two" for
                //this normalization.
                baseParts = baseParts.slice(0, baseParts.length - 1);
                name = name.split('/');
                lastIndex = name.length - 1;

                // Node .js allowance:
                if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {
                    name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');
                }

                name = baseParts.concat(name);

                //start trimDots
                for (i = 0; i < name.length; i += 1) {
                    part = name[i];
                    if (part === ".") {
                        name.splice(i, 1);
                        i -= 1;
                    } else if (part === "..") {
                        if (i === 1 && (name[2] === '..' || name[0] === '..')) {
                            //End of the line. Keep at least one non-dot
                            //path segment at the front so it can be mapped
                            //correctly to disk. Otherwise, there is likely
                            //no path mapping for a path starting with '..'.
                            //This can still fail, but catches the most reasonable
                            //uses of ..
                            break;
                        } else if (i > 0) {
                            name.splice(i - 1, 2);
                            i -= 2;
                        }
                    }
                }
                //end trimDots

                name = name.join("/");
            } else if (name.indexOf('./') === 0) {
                // No baseName, so this is ID is resolved relative
                // to baseUrl, pull off the leading dot.
                name = name.substring(2);
            }
        }

        //Apply map config if available.
        if ((baseParts || starMap) && map) {
            nameParts = name.split('/');

            for (i = nameParts.length; i > 0; i -= 1) {
                nameSegment = nameParts.slice(0, i).join("/");

                if (baseParts) {
                    //Find the longest baseName segment match in the config.
                    //So, do joins on the biggest to smallest lengths of baseParts.
                    for (j = baseParts.length; j > 0; j -= 1) {
                        mapValue = map[baseParts.slice(0, j).join('/')];

                        //baseName segment has  config, find if it has one for
                        //this name.
                        if (mapValue) {
                            mapValue = mapValue[nameSegment];
                            if (mapValue) {
                                //Match, update name to the new value.
                                foundMap = mapValue;
                                foundI = i;
                                break;
                            }
                        }
                    }
                }

                if (foundMap) {
                    break;
                }

                //Check for a star map match, but just hold on to it,
                //if there is a shorter segment match later in a matching
                //config, then favor over this star map.
                if (!foundStarMap && starMap && starMap[nameSegment]) {
                    foundStarMap = starMap[nameSegment];
                    starI = i;
                }
            }

            if (!foundMap && foundStarMap) {
                foundMap = foundStarMap;
                foundI = starI;
            }

            if (foundMap) {
                nameParts.splice(0, foundI, foundMap);
                name = nameParts.join('/');
            }
        }

        return name;
    }

    function makeRequire(relName, forceSync) {
        return function () {
            //A version of a require function that passes a moduleName
            //value for items that may need to
            //look up paths relative to the moduleName
            var args = aps.call(arguments, 0);

            //If first arg is not require('string'), and there is only
            //one arg, it is the array form without a callback. Insert
            //a null so that the following concat is correct.
            if (typeof args[0] !== 'string' && args.length === 1) {
                args.push(null);
            }
            return req.apply(undef, args.concat([relName, forceSync]));
        };
    }

    function makeNormalize(relName) {
        return function (name) {
            return normalize(name, relName);
        };
    }

    function makeLoad(depName) {
        return function (value) {
            defined[depName] = value;
        };
    }

    function callDep(name) {
        if (hasProp(waiting, name)) {
            var args = waiting[name];
            delete waiting[name];
            defining[name] = true;
            main.apply(undef, args);
        }

        if (!hasProp(defined, name) && !hasProp(defining, name)) {
            throw new Error('No ' + name);
        }
        return defined[name];
    }

    //Turns a plugin!resource to [plugin, resource]
    //with the plugin being undefined if the name
    //did not have a plugin prefix.
    function splitPrefix(name) {
        var prefix,
            index = name ? name.indexOf('!') : -1;
        if (index > -1) {
            prefix = name.substring(0, index);
            name = name.substring(index + 1, name.length);
        }
        return [prefix, name];
    }

    /**
     * Makes a name map, normalizing the name, and using a plugin
     * for normalization if necessary. Grabs a ref to plugin
     * too, as an optimization.
     */
    makeMap = function (name, relName) {
        var plugin,
            parts = splitPrefix(name),
            prefix = parts[0];

        name = parts[1];

        if (prefix) {
            prefix = normalize(prefix, relName);
            plugin = callDep(prefix);
        }

        //Normalize according
        if (prefix) {
            if (plugin && plugin.normalize) {
                name = plugin.normalize(name, makeNormalize(relName));
            } else {
                name = normalize(name, relName);
            }
        } else {
            name = normalize(name, relName);
            parts = splitPrefix(name);
            prefix = parts[0];
            name = parts[1];
            if (prefix) {
                plugin = callDep(prefix);
            }
        }

        //Using ridiculous property names for space reasons
        return {
            f: prefix ? prefix + '!' + name : name, //fullName
            n: name,
            pr: prefix,
            p: plugin
        };
    };

    function makeConfig(name) {
        return function () {
            return (config && config.config && config.config[name]) || {};
        };
    }

    handlers = {
        require: function (name) {
            return makeRequire(name);
        },
        exports: function (name) {
            var e = defined[name];
            if (typeof e !== 'undefined') {
                return e;
            } else {
                return (defined[name] = {});
            }
        },
        module: function (name) {
            return {
                id: name,
                uri: '',
                exports: defined[name],
                config: makeConfig(name)
            };
        }
    };

    main = function (name, deps, callback, relName) {
        var cjsModule, depName, ret, map, i,
            args = [],
            callbackType = typeof callback,
            usingExports;

        //Use name if no relName
        relName = relName || name;

        //Call the callback to define the module, if necessary.
        if (callbackType === 'undefined' || callbackType === 'function') {
            //Pull out the defined dependencies and pass the ordered
            //values to the callback.
            //Default to [require, exports, module] if no deps
            deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;
            for (i = 0; i < deps.length; i += 1) {
                map = makeMap(deps[i], relName);
                depName = map.f;

                //Fast path CommonJS standard dependencies.
                if (depName === "require") {
                    args[i] = handlers.require(name);
                } else if (depName === "exports") {
                    //CommonJS module spec 1.1
                    args[i] = handlers.exports(name);
                    usingExports = true;
                } else if (depName === "module") {
                    //CommonJS module spec 1.1
                    cjsModule = args[i] = handlers.module(name);
                } else if (hasProp(defined, depName) ||
                           hasProp(waiting, depName) ||
                           hasProp(defining, depName)) {
                    args[i] = callDep(depName);
                } else if (map.p) {
                    map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});
                    args[i] = defined[depName];
                } else {
                    throw new Error(name + ' missing ' + depName);
                }
            }

            ret = callback ? callback.apply(defined[name], args) : undefined;

            if (name) {
                //If setting exports via "module" is in play,
                //favor that over return value and exports. After that,
                //favor a non-undefined return value over exports use.
                if (cjsModule && cjsModule.exports !== undef &&
                        cjsModule.exports !== defined[name]) {
                    defined[name] = cjsModule.exports;
                } else if (ret !== undef || !usingExports) {
                    //Use the return value from the function.
                    defined[name] = ret;
                }
            }
        } else if (name) {
            //May just be an object definition for the module. Only
            //worry about defining if have a module name.
            defined[name] = callback;
        }
    };

    requirejs = require = req = function (deps, callback, relName, forceSync, alt) {
        if (typeof deps === "string") {
            if (handlers[deps]) {
                //callback in this case is really relName
                return handlers[deps](callback);
            }
            //Just return the module wanted. In this scenario, the
            //deps arg is the module name, and second arg (if passed)
            //is just the relName.
            //Normalize module name, if it contains . or ..
            return callDep(makeMap(deps, callback).f);
        } else if (!deps.splice) {
            //deps is a config object, not an array.
            config = deps;
            if (config.deps) {
                req(config.deps, config.callback);
            }
            if (!callback) {
                return;
            }

            if (callback.splice) {
                //callback is an array, which means it is a dependency list.
                //Adjust args if there are dependencies
                deps = callback;
                callback = relName;
                relName = null;
            } else {
                deps = undef;
            }
        }

        //Support require(['a'])
        callback = callback || function () {};

        //If relName is a function, it is an errback handler,
        //so remove it.
        if (typeof relName === 'function') {
            relName = forceSync;
            forceSync = alt;
        }

        //Simulate async callback;
        if (forceSync) {
            main(undef, deps, callback, relName);
        } else {
            //Using a non-zero value because of concern for what old browsers
            //do, and latest browsers "upgrade" to 4 if lower value is used:
            //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:
            //If want a value immediately, use require('id') instead -- something
            //that works in almond on the global level, but not guaranteed and
            //unlikely to work in other AMD implementations.
            setTimeout(function () {
                main(undef, deps, callback, relName);
            }, 4);
        }

        return req;
    };

    /**
     * Just drops the config on the floor, but returns req in case
     * the config return value is used.
     */
    req.config = function (cfg) {
        return req(cfg);
    };

    /**
     * Expose module registry for debugging and tooling
     */
    requirejs._defined = defined;

    define = function (name, deps, callback) {

        //This module may not have dependencies
        if (!deps.splice) {
            //deps is not an array, so probably means
            //an object literal or factory function for
            //the value. Adjust args.
            callback = deps;
            deps = [];
        }

        if (!hasProp(defined, name) && !hasProp(waiting, name)) {
            waiting[name] = [name, deps, callback];
        }
    };

    define.amd = {
        jQuery: true
    };
}());

define("almond", function(){});

define('jsonrpc',['require', 'exports', 'module'], function (require, exports, module) {
  

"use strict";
var jet = window.jet = window.jet || {};
jet.JsonRPC = function (config) {
  var encode = JSON.stringify;
  var decode = JSON.parse;
  var WebSocket = window.WebSocket || window.MozWebSocket;
  var url = config.url || "ws://127.0.0.1:11123";
  var wsock = new WebSocket(url, "jet");
  var messages = [];
  var isDef = jet.util.isDef;
  var isArr = jet.util.isArr;
  var errorObject = jet.util.errorObject;
  var closed;
  var that = this;
  this.queue = function (message) {
    messages.push(message);
  };
  var willFlush = true;
  this.flush = function () {
    var encoded;
    if (messages.length === 1) {
      encoded = encode(messages[0]);
    } else if (messages.length > 1) {
      encoded = encode(messages);
    }
    if (encoded) {
      if (config.onSend) {
        config.onSend(encoded, messages);
      }
      wsock.send(encoded);
      messages.length = 0;
    }
    willFlush = false;
  };
  var requestDispatchers = {};
  var responseDispatchers = {};
  this.addRequestDispatcher = function (id, dispatch) {
    requestDispatchers[id] = dispatch;
  };
  this.removeRequestDispatcher = function (id) {
    delete requestDispatchers[id];
  };
  this.hasRequestDispatcher = function (id) {
    return isDef(requestDispatchers[id]);
  };
  var dispatchResponse = function (message) {
    var mid = message.id;
    var callbacks = responseDispatchers[mid];
    delete responseDispatchers[mid];
    if (callbacks) {
      if (isDef(message.result)) {
        if (callbacks.success) {
          callbacks.success(message.result);
        }
      } else if (isDef(message.error)) {
        if (callbacks.error) {
          callbacks.error(message.error);
        }
      }
    }
  };
  var dispatchRequest = function (message) {
    var dispatcher = requestDispatchers[message.method];
    try {
      dispatcher(message);
    } catch (err) {
      if (isDef(message.id)) {
        that.queue({
          id: message.id,
          error: errorObject(err)
        });
      }
    }
  };
  var dispatchSingleMessage = function (message) {
    if (message.method && message.params) {
      dispatchRequest(message);
    } else if (isDef(message.result) || isDef(message.error)) {
      dispatchResponse(message);
    }
  };
  var dispatchMessage = function (message) {
    var decoded = decode(message.data);
    willFlush = true;
    if (config.onReceive) {
      config.onReceive(message.data, decoded);
    }
    if (isArr(decoded)) {
      decoded.forEach(function (message) {
        dispatchSingleMessage(message);
      });
    } else {
      dispatchSingleMessage(decoded);
    }
    that.flush();
  };
  wsock.onmessage = dispatchMessage;
  var addHook = function (callbacks, callbackName, hook) {
    if (callbacks[callbackName]) {
      var orig = callbacks[callbackName];
      callbacks[callbackName] = function (result) {
        hook();
        orig(result);
      };
    } else {
      callbacks[callbackName] = hook;
    }
  };
  var id = 0;
  this.service = function (method, params, complete, callbacks) {
    var rpcId;
    if (closed) {
      throw new Error("Jet Websocket connection is closed");
    }
    if (callbacks) {
      params.timeout = callbacks.timeout;
      id = id + 1;
      rpcId = id;
      if (complete) {
        addHook(callbacks, "success", function () {
          complete(true);
        });
        addHook(callbacks, "error", function () {
          complete(false);
        });
      }
      responseDispatchers[id] = callbacks;
    } else {
      if (complete) {
        complete(true);
      }
    }
    var message = {
      id: rpcId,
      method: method,
      params: params
    };
    if (willFlush) {
      that.queue(message);
    } else {
      wsock.send(encode(message));
    }
  };
  this.batch = function (action) {
    willFlush = true;
    action();
    that.flush();
  };
  this.close = function () {
    closed = true;
    that.flush();
    wsock.close();
  };
  wsock.onclose = function () {
    closed = true;
    if (config.onClose) {
      config.onClose();
    }
  };
  wsock.onerror = function (err) {
    closed = true;
    if (config.onError) {
      config.onError(err);
    }
  };
  that.config = function (params, callbacks) {
    that.service("config", params, null, callbacks);
  };
  wsock.onopen = function () {
    if (isDef(config.name)) {
      that.config({ name: config.name }, {
        success: function () {
          that.flush();
          if (config.onOpen) {
            config.onOpen();
          }
        },
        error: function () {
          that.close();
        }
      });
    } else if (config.onOpen) {
      config.onOpen(that);
    }
    that.flush();
  };
  return this;
};

return module.exports;

});
define('peer',['require', 'exports', 'module'], function (require, exports, module) {
  

"use strict";
var jet = window.jet = window.jet || {};
jet.Peer = function (config) {
  config = config || {};
  var isDef = jet.util.isDef;
  var isArr = jet.util.isArr;
  var invalidParams = jet.util.invalidParams;
  var errorObject = jet.util.errorObject;
  var jsonrpc = new jet.JsonRPC(config);
  var that = this;
  that.close = function () {
    jsonrpc.close();
  };
  that.batch = function (action) {
    jsonrpc.batch(action);
  };
  that.add = function (desc, dispatch, callbacks) {
    var path = desc.path;
    var addDispatcher = function (success) {
      if (success) {
        jsonrpc.addRequestDispatcher(path, dispatch);
      }
    };
    var params = {
      path: path,
      value: desc.value
    };
    jsonrpc.service("add", params, addDispatcher, callbacks);
    var ref = {
      remove: function (callbacks) {
        that.remove(path, callbacks);
      },
      isAdded: function () {
        return jsonrpc.hasRequestDispatcher(path);
      },
      add: function (value, callbacks) {
        if (isDef(value)) {
          desc.value = value;
        }
        that.add(desc, dispatch, callbacks);
      },
      path: function () {
        return path;
      }
    };
    return ref;
  };
  that.remove = function (path, callbacks) {
    var params = { path: path };
    var removeDispatcher = function () {
      jsonrpc.removeRequestDispatcher(path);
    };
    jsonrpc.service("remove", params, removeDispatcher, callbacks);
  };
  that.call = function (path, callparams, callbacks) {
    var params = {
      path: path,
      args: callparams || [],
      timeout: callbacks && callbacks.timeout
    };
    jsonrpc.service("call", params, null, callbacks);
  };
  that.set = function (path, value, callbacks) {
    var params = {
      path: path,
      value: value,
      valueAsResult: callbacks && callbacks.valueAsResult,
      timeout: callbacks && callbacks.timeout
    };
    jsonrpc.service("set", params, null, callbacks);
  };
  var fetchId = 0;
  var createFetchDispatcher = function (params, f, ref) {
    if (isDef(params.sort)) {
      if (params.sort.asArray) {
        delete params.sort.asArray;
        var arr = [];
        var from = params.sort.from;
        return function (message) {
          var params = message.params;
          arr.length = params.n;
          params.changes.forEach(function (change) {
            arr[change.index - from] = change;
          });
          f(arr, ref);
        };
      } else {
        return function (message) {
          var params = message.params;
          f(params.changes, params.n, ref);
        };
      }
    } else {
      return function (message) {
        var params = message.params;
        f(params.path, params.event, params.value, ref);
      };
    }
  };
  that.fetch = function (params, f, callbacks) {
    var id = "__f__" + fetchId;
    var sorting = params.sort;
    fetchId = fetchId + 1;
    var ref = {};
    var fetchDispatcher = createFetchDispatcher(params, f, ref);
    var addFetcher = function () {
      jsonrpc.addRequestDispatcher(id, fetchDispatcher);
    };
    if (typeof params === "string") {
      params = { path: { contains: params } };
    }
    params.id = id;
    jsonrpc.service("fetch", params, addFetcher, callbacks);
    ref.unfetch = function (callbacks) {
      var removeDispatcher = function () {
        jsonrpc.removeRequestDispatcher(id);
      };
      jsonrpc.service("unfetch", { id: id }, removeDispatcher, callbacks);
    };
    ref.isFetching = function () {
      return jsonrpc.hasRequestDispatcher(id);
    };
    ref.fetch = function (callbacks) {
      jsonrpc.service("fetch", params, addFetcher, callbacks);
    };
    return ref;
  };
  that.method = function (desc, addCallbacks) {
    var dispatch;
    if (desc.call) {
      dispatch = function (message) {
        var params = message.params;
        var result;
        var err;
        try {
          if (isArr(params) && params.length > 0) {
            result = desc.call.apply(undefined, params);
          } else {
            result = desc.call.call(undefined, params);
          }
        } catch (e) {
          err = e;
        }
        var mid = message.id;
        if (isDef(mid)) {
          if (!isDef(err)) {
            jsonrpc.queue({
              id: mid,
              result: result || {}
            });
          } else {
            jsonrpc.queue({
              id: mid,
              error: errorObject(err)
            });
          }
        }
      };
    } else if (desc.callAsync) {
      dispatch = function (message) {
        var reply = function (resp) {
          var mid = message.id;
          resp = resp || {};
          if (isDef(mid)) {
            var response = { id: mid };
            if (isDef(resp.result) && !isDef(resp.error)) {
              response.result = resp.result;
            } else if (isDef(resp.error)) {
              response.error = errorObject(resp.error);
            } else {
              response.error = errorObject("jet.peer Invalid async method response " + desc.path);
            }
            jsonrpc.queue(response);
            jsonrpc.flush();
          }
        };
        var params = message.params;
        try {
          if (isArr(params) && params.length > 0) {
            params.push(reply);
            desc.callAsync.apply(undefined, params);
          } else {
            desc.callAsync.call(undefined, params, reply);
          }
        } catch (err) {
          var mid = message.id;
          if (isDef(mid)) {
            jsonrpc.queue({
              id: mid,
              error: errorObject(err)
            });
          }
        }
      };
    } else {
      throw "invalid method desc" + (desc.path || "?");
    }
    var ref = that.add(desc, dispatch, addCallbacks);
    return ref;
  };
  that.state = function (desc, addCallbacks) {
    var dispatch;
    if (desc.set) {
      dispatch = function (message) {
        var value = message.params.value;
        try {
          var result = desc.set(value) || {};
          if (isDef(result.value)) {
            desc.value = result.value;
          } else {
            desc.value = value;
          }
          if (isDef(message.id)) {
            var resp = {};
            resp.id = message.id;
            if (message.params.valueAsResult) {
              resp.result = desc.value;
            } else {
              resp.result = true;
            }
            jsonrpc.queue(resp);
          }
          if (!result.dontNotify) {
            jsonrpc.queue({
              method: "change",
              params: {
                path: desc.path,
                value: desc.value
              }
            });
          }
        } catch (err) {
          if (isDef(message.id)) {
            jsonrpc.queue({
              id: message.id,
              error: errorObject(err)
            });
          }
        }
      };
    } else if (isDef(desc.setAsync)) {
      dispatch = function (message) {
        var value = message.params.value;
        var reply = function (resp) {
          var mid = message.id;
          resp = resp || {};
          if (isDef(resp.value)) {
            desc.value = resp.value;
          } else {
            desc.value = value;
          }
          if (isDef(mid)) {
            var response = { id: mid };
            if (!isDef(resp.error)) {
              if (message.params.valueAsResult) {
                response.result = desc.value;
              } else {
                response.result = true;
              }
            } else {
              response.error = errorObject(resp.error);
            }
            jsonrpc.queue(response);
          }
          if (!isDef(resp.error) && !isDef(resp.dontNotify)) {
            jsonrpc.queue({
              method: "change",
              params: {
                path: desc.path,
                value: desc.value
              }
            });
          }
          jsonrpc.flush(resp.dontNotify);
        };
        try {
          desc.setAsync(value, reply);
        } catch (err) {
          var mid = message.id;
          if (isDef(mid)) {
            jsonrpc.queue({
              id: mid,
              error: errorObject(err)
            });
          }
        }
      };
    } else {
      dispatch = function (message) {
        var mid = message.id;
        if (isDef(mid)) {
          jsonrpc.queue({
            id: mid,
            error: invalidParams(desc.path + " is read-only")
          });
        }
      };
    }
    var ref = that.add(desc, dispatch, addCallbacks);
    ref.value = function (value) {
      if (isDef(value)) {
        desc.value = value;
        jsonrpc.queue({
          method: "change",
          params: {
            path: desc.path,
            value: value
          }
        });
        jsonrpc.flush();
      } else {
        return desc.value;
      }
    };
    return ref;
  };
  return that;
};

return module.exports;

});
define('util',['require', 'exports', 'module'], function (require, exports, module) {
  

"use-strict";
var jet = window.jet = window.jet || {};
jet.util = {};
window.jet.util.invalidParams = function (data) {
  var err = {
    code: -32602,
    message: "Invalid params",
    data: data
  };
  return err;
};
window.jet.util.errorObject = function (err) {
  var data;
  var isDef = window.jet.util.isDef;
  if (typeof err === "object" && isDef(err.code) && isDef(err.message)) {
    return err;
  } else {
    if (typeof err === "object") {
      data = {};
      data.message = err.message;
      data.lineNumber = err.lineNumber;
      data.fileName = err.fileName;
    }
    return {
      code: -32602,
      message: "Internal error",
      data: data || err
    };
  }
};
window.jet.util.isDef = function (x) {
  return typeof x !== "undefined";
};
window.jet.util.isArr = function (x) {
  return x instanceof Array;
};

return module.exports;

});

require('jsonrpc');
require('peer');
require('util');
};
if (__isAMD) {
  return define(bundleFactory);
} else {
    if (__isNode) {
        return module.exports = bundleFactory();
    } else {
        return bundleFactory();
    }
}
}).call(this, (typeof exports === 'object' || typeof window === 'undefined' ? global : window),
              (typeof exports === 'object' || typeof window === 'undefined' ? global : window))